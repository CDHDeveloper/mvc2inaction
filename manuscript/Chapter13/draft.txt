One common technique in building applications is to accept dependencies in the constructor of your objects.  Leveraging various tools we can automatically wire-up these dependencies and provide the arguments without having to write mundane, repetetive code.  In order to enable this for our controllers we will need to take responsibility for creating them.  In this Chapter, you will learn about Controller Factories and how you can use them to help enable such scenarios.

13.1  What are Controller Factories?

Controller Factories are an important extension point in the ASP.NET MVC Framework.  They allow you to take on the responsibility of creating controllers.  This enables you to apply a set of logic for every single controller in your application.  You can use Controller Factories to apply a custom IActionInvoker instance to all of your controllers, or perhaps to add custom logging.
The most common case of a controller is to enable support for dependency injection tools.  Not sure what all this dependency injection mumbo-jumbo is?  

[NOTE START]
The Inversion of Control principle and Dependency Injection
Normally when code executes other code, there is a linear flow of creation and execution. For instance, if I have a class that depends on another class, I will create that class with the “new” operator, then execute the class by calling a method. If I used Inversion of Control (IoC), I would still call methods on the class, but I would require an instance of the class passed into my constructor. In this manner, I yield control of locating or creating my dependency to the calling code. DI is the act of injecting a dependency into a class that depends on it. Often used interchangeably, IoC and DI yield loosely coupled code and are often used with interfaces. With interfaces, classes declare dependencies as interfaces in the constructor arguments. Calling code then locates appropriate classes and passes them in when constructing the class.
IoC containers come into play to assist with managing this technique when used through an application. There are plenty of IoC containers to choose from, but the favorites at this time seem to be StructureMap, Ninject, and Castle Windsor found at http://structuremap.sourceforge.net, http://ninject.org and http://www.castleproject.org/container respectively. 
[NOTE END]

Controllers can leverage dependency injection by declaring their dependencies as constructor parameters.  This _inverts_ the control where the caller is responsible for supplying the dependencies of a class, rather than the class newing up concrete instances itself.  It allows you to decouple controllers from concrete instances of its dependencies (such as a repository or service).  It is quite liberating, not to mention it helps facilitate decoupled unit testing.

[NOTE]
When we ask for dependencies in the constructor, we call it constructor injection. There is another technique called property injection but it is not as apparent that these components are required for the object to do its job. IoC tools can usually do both, but constructor injection is preferred for required dependencies.
[NOTE END]

If you were to define a constructor with a dependency, the framework (by default) will no longer be able to build up your controllers for you.  If you try, you're likely to get an error like in Figure 13.1.

Figure 13.1 - Trying to use constructor dependencies without replacing the Controller Factory
[FIGURE]

The reason is because the DefaultControllerFactory simply uses Activator.CreateInstance and knows nothing about the controllers constructor arguments.  To fix this, you'll need to create your own custom Controller Factory.  

13.2  Creating a custom Controller Factory

Listing 13.1 shows the basic idea.

Listing 13.1 - A custom Controller Factory
public class MyCustomControllerFactory : DefaultControllerFactory
{
    protected override IController GetControllerInstance(RequestContext requestContext, 
                                                        Type controllerType)
    {
        /* implement controller creation logic */        
    }
}

You could implement the IControllerFactory interface directly, however the DefaultControllerFactory has some logic for determining the controller's Type based on the name.  You simply override this method and plug in your behavior.

Once you have a custom Controller Factory, how do you use it?  At application startup, in your global.asax.cs file, you can register your implementation like this:

    ControllerBuilder.Current.SetControllerFactory(new MyCustomControllerFactory());
    
The framework will now use your class to build all instances of controllers. We can use this feature to implement IoC support in our controllers, but perhaps you're wondering why this is even needed?

13.3  Dependency Injection for your Controllers

One of the benefits of the ASP.NET MVC Framework is the separation of concerns that it allows.  When you segment your code into controllers, models, and views, it becomes easy to understand and maintain.  Separation of Concerns is one of the best attributes your code can have if you wish it to be maintainable.

It is not hard to imagine your controller growing and growing until it gets out of hand.  Packing too many responsiblities into your controller is a sure-fire way to a messy project that makes it so difficult to work with it feels like you're wading through mud.

Here is a small list of things your controller should *not* do:

  * Perform data access queries directly
  * Talk to the file system directly
  * Send emails directly
  * Call web services directly

Notice a pattern?  Any external dependency on some sort of infrastructure is a great candidate to extract out into an interface and be utilized by your controller.  This has a few benefits:

  * Controller becomes thinner, thus easier to understand
  * Controller becomes testable - we can write unit tests and stub out the dependencies, isolating the class under test.
  
We can also take this idea to any areas of the code where the controller is performing complex business logic.  This should really be the responsibility of either the Model or perhaps a Domain Service (lookup URL for domain service).  

It is not uncommon to see a controller that looks like Listing 13.2.

Listing 13.2 - A Controller that accepts dependencies in its constructor
[LISTING]

Creating controllers like this by hand would be an effort in extreme tedium, and luckily you don't have to do it by hand.  This is where IoC tools (also known as IoC _containers_) come in handy.  There are quite a few to choose from, but currently the three most popular are:
	
	* StructureMap (http://structuremap.sourceforge.net)
	* Ninject (http://ninject.org)
	* Castle Windsor (http://www.castleproject.org/container)

Each has its own strengths and weaknesses and I encourage you to take a look at each to see which one feels best and fits the needs of your applications.  We'll briefly cover these in order to create a custom Controller Factory for each one.  

For the sample application, we'll have an interface called IMessageProvider that our controller will depend on (in the constructor) and the implementation of this interface will not be known to the controller at all.  In other words it is _decoupled_ from the implementation.

We'll start with StructureMap.

13.4 Creating a Controller Factory for StructureMap

The first step is to download the StructureMap binaries and include them somewhere in your project, such as a _lib_ folder.  Go ahead and add a reference to the StructureMap.dll to your ASP.NET MVC project.
StructureMap, as with any IoC tool, needs to be initialized upon application startup.  We could place the initialization code directly in global.asax.cs in Application_Start however this tends to be a breeding ground for tons of unrelated code.  Instead, we'll leverage a small class called a Bootstrapper (which will be kicked off in Application_Start.  The Bootstrapper simply abstracts initialization code away from the global.asax.cs to keep things clean and simple.  Listing 13.3 shows this class implementation.

Listing 13.3 - Initializing StructureMap in a bootstrapper class
using StructureMap;
s
public static class StructureMapBootstrapper
{
    public static void Initialize()
    {
        ObjectFactory.Initialize(x => x.AddRegistry(new MyStructureMapApplicationRegistry()));    
    }
}

In order to initialize StructureMap and tell it about our components, we use the ObjectFactory.Initialize() method.  This accepts a lambda expression that we use to interact with the framework.  In our case, we're utilizing a _registry_ (which we haven't created yet).  Other, more advanced StructureMap scenarios exist where you can utilize conventions, but that is subject to more advanced study.  Listing 13.4 contains the definition of MyStructureMapApplicationRegistry.

Listing 13.4 - A StructureMap registry for our component(s)
using ControllerFactories.Models;
using StructureMap.Configuration.DSL;

namespace ControllerFactories
{
    internal class MyStructureMapApplicationRegistry : Registry
    {
        protected override void configure()
        {
            //wire up IMessageProvider => StructureMapMessageProvider
            ForRequestedType<IMessageProvider>()
                .TheDefaultIsConcreteType<StructureMapMessageProvider>();
        }
    }
}

In a StructureMap registry, you're given the ability to match up interfaces to their concrete implementations.  You can also do advanced things like set their behaviors (singleton, per-web request, transient, etc) so that you can control how StructureMap builds it.  For our simple case, we won't worry about this.

One thing you'll notice about StructureMap is it reads very much like English.  It can help, especially to someone not familiar with the concept of dependency injection; it seems pretty obvious what is happening here.  At times it can be a tad verbose, but it is certainly a matter of personal preference.

We're still not done yet.  We need to define the IMessageProvider interface and the StructureMapMessageProvider class.  In your Models folder, go ahead and add these.  They should look like Listing 13.5.

Listing 13.5 - A simple interface & concrete implementation
public interface IMessageProvider
{
    string GetMessage();
}

public class StructureMapMessageProvider : IMessageProvider
{
    public string GetMessage()
    {
        return "This message was provided by StructureMap";
    }
}


Let's now make your HomeController dependent on this new IMessageProvider interface.  To do this, we'll add a constructor that accepts and argument, as shown in Listing 13.6.

Listing 13.6 - "Declare" dependencies by accepting them as constructor arguments
public class HomeController : Controller
{
    private IMessageProvider _messageProvider;

    public HomeController(IMessageProvider messageProvider)
    {
        _messageProvider = messageProvider;
    }

    /* snip */
}

At this point if we were to try to run the application it would break.  Why?  Because the DefaultControllerFactory doesn't know how to build this controller now, since it requires a messageProvider.  Let's create our StructureMapControllerFactory to solve this problem.  Add a new class to the project (at the root is fine) and name it StructureMapControllerFactory.  Listing 13.7 shows the details.

Listing 13.7 - A StructureMap Controller Factory
public class StructureMapControllerFactory : DefaultControllerFactory
{
    protected override IController GetControllerInstance(RequestContext requestContext, Type controllerType)
    {            
        return ObjectFactory.GetInstance(controllerType) as IController;
    }
}

Notice that we inherit from DefaultControllerFactory.  We don't have to - at the very minimum we have to implement IControllerFactory - but by deriving from DefaultControllerFactory we're given some easier methods to override.  The only method we really need to override in this case is GetControllerInstance.  We'll use StructureMap's ObjectFactory.GetInstance method to pull an object out of the container.  StructureMap will notice that we have a constructor that accepts arguments and try to fulfill those also.  If you haven't registered any types ahead of time then you'll receive an error here.

The last step is simply plugging it in!  In your Global.asax, add the following line of code:

ControllerBuilder.Current.SetControllerFactory(
	new StructureMapControllerFactory()
);

You're done!  The last step is to actually add a view to call this controller & display the dynamic message on the view.  Figure 13.XX shows an example of this.

[INSERT FIGURE 13.xx]
Figure 13.XX - The IMessageProvider is invoked to display a message.  The actual implementation is decoupled from the controller.

Next, we'll cover the same example but with a different IoC tool called Ninject.


13.5 Creating a Controller Factory for Ninject

Using Ninject is very similar to using StructureMap.  The implementation and API are quite different, however so as you read this section you might want to refer back and compare the code.  See which one you find more understandable.

Ninject was created by Nate Kohari.  The official Ninject webiste is at http://ninject.org, however at the time of writing it still only offers v1.0.  Ninject2, as it is currently called, is available on GitHub at http://github.com/enkari/ninject.  This section will use the latest Ninject2 libary from there.

Go ahead and download the binaries, and copy Ninject.dll into a folder inside your project.

[NOTE BEGIN]
Wait, what's with the Ninject.Web.Mvc.dll?
Ninject has out of the box support for ASP.NET MVC.  Unfortunately if you don't understand how Ninject works then we're just hiding all of the important parts.  This section will build out the components we need from scratch.  You may choose to utilize Ninject.Web.Mvc.dll on your own, however.
[NOTE END]

We know from the last section that we need to initialize dependencies on application startup.  For Ninject, we do that is known as a module.  Create a class called MyNinjectModule and make it look like Listing 13.XX.

Listing 13.XX - A Ninject Module is used to register dependencies.
public class MyNinjectModule : NinjectModule
{
    public override void Load()
    {
        Bind<IMessageProvider>().To<NinjectMessageProvider>();
    }
}

We haven't created our NinjectMessageProvider yet, so let's do that now.  In your Models folder, create a new class called NinjectMessageProvider.  It has to implement the IMessageProvider interface, so make it look like Listing 13.XX.

Listing 13.XX - A custom IMessageProvider for Ninject
public class NinjectMessageProvider : IMessageProvider
{
    public string GetMessage()
    {
        return "This message was provided by Ninject";
    }
}

Unlike StructureMap, Ninject must know about any types it will construct ahead of time, so we also need to register all of our controllers.  Don't worry, this isn't too hard.  We can register them all with a little reflection.  For the sake of simplicity, we'll just register our single HomeController in the Module we just built.  This would be a good candidate to refactor out into a AutomaticControllersModule later.

Listing 13.XX - Manually registering the HomeController
public class MyNinjectModule : NinjectModule
{
    public override void Load()
    {
        Bind<IMessageProvider>().To<NinjectMessageProvider>();
        Bind<IController>().To<HomeController>().InRequestScope()
            .Named("home");
    }
}

Notice what we did different this time?  We set an option called "RequestScope" and named the dependency "home".  This is done for 2 reasons.  First, we need to be able to retrieve an instance of IController in our upcoming NinjectControllerFactory.  However, you can see that with more controllers, simply resolving IController is not enough.  We have to do it by name.  In this case we're making a convention that the name is the lowercased version of the controller name (without the "controller" of course).  

The "request scope" option requires a bit further explanation.  By default, many IoC tools have a singleton behavior for their components.  That means that when you ask for Type A, and later on ask for Type A again, you could be given the exact same instance.  In the case of anything web related, that could be very dangerous, leading to things like HttpContext or HttpSession being shared between 2 requests.  In practice, this usually just means a really hard-to-track-down bug that doesn't make sense until you realize that you never set the request scope.  Remember this rule:  For ASP.NET MVC Controllers, register them with a _transient_ or _request scope_ behavior (that is, each request gets its own instance).

We'll follow the same Bootsrapper pattern from the last section.  Create a class called NinjectBootstrapper.  Type the code in Listing 13.XX.

Listing 13.XX Bootstrapping Ninject
public static class NinjectBootstrapper
{
    public static IKernel Kernel { get; private set; }

    public static void Initialize()
    {
        Kernel = new StandardKernel(
            new MyNinjectModule()
            );
    }
}

Ninject's core object is called the kernel.  You typically create a kernel and keep it around for the life of the application.  Since this class is static, you can refer to this Kernel property later on.  We'll call Initialize on this puppy inside of the Global.asax (under Application_Start):

NinjectBootstrapper.Initialize();

We're almost done.  The last remaining step is to create the controller factory.  Since you already created one in the last section, this one should be very straightforward.  Listing 13.XX shows the details.

Listing 13.XX - Creating a ControllerFactory for Ninject
public class MyNinjectControllerFactory : DefaultControllerFactory
{
    private IKernel _kernel;

    public MyNinjectControllerFactory(IKernel kernel)
    {
        _kernel = kernel;
    }

    protected override IController GetControllerInstance(RequestContext requestContext, Type controllerType)
    {
        var controller = _kernel.Get<IController>(controllerType.Name.Replace("Controller", "").ToLowerInvariant());
        return controller;            
    }
}

The controller factory will need access to the kernel in order to resolve types, so we accept one in the constructor and hang on to it in a private member variable.  You can see the naming convention that we defined from before in action here.  We take the controller's type name, make it lowercase, remove the word "Controller" and the use that to match the correct controller inside the kernel.

Can you guess what the last step is?  Yep, we just need to wire up this new controller factory in Application_Start:

ControllerBuilder.Current.SetControllerFactory(
	new NinjectControllerFactory(NinjectBootstrapper.Kernel)
);

If you build and run the application now, you should see the new message, though all we did is change out the IoC plumbing.  Your screen should look something like Figure 13.XX.

[Figure 13.XX]
Figure 13.XX - Our controller is now provided a Ninject-specific IMessageProvider, but the controller doesn't even know (or care).

There's one more popular IoC framework called Windsor.  We'll look at that one next.

13.6 - Creating a Controller Factory for Windsor

Windsor is part of the Castle Project.  It has a very large following and supports some really advanced concepts such as aspect oriented programming.  It can be configured with XML or code (I prefer code).

You can download the binaries from http://www.castleproject.org/container/.  Place the dlls somewhere near your project.  You'll need to specifically add a reference to these dlls:

 * Castle.Core.dll
 * Castle.DynamicProxy.dll
 * Castle.MicroKernel.dll
 * Castle.Windsor.dll

You've already gone through this exercise twice now, and this time is really not much different.  I won't cover as much detail in this section, instead focus on the relevant parts of the code.

First up is our WindsorBootstrapper, displayed in Listing 13.XX.

Listing 13.XX - Bootstrapping Windsor
public static class WindsorBootstrapper
{
    public static IWindsorContainer Container { get; private set; }

    public static void Initialize()
    {
        Container = new WindsorContainer();


        RegisterControllers();

        Container.AddComponent<IMessageProvider, WindsorMessageProvider>();
    }

    private static void RegisterControllers()
    {
        //register all controllers with their Type name
        Container.Register(AllTypes.Of<IController>()
                               .FromAssembly(Assembly.GetExecutingAssembly())
                               .Configure(c => c.LifeStyle.Transient.Named(c.Implementation.Name)));
    }
}

Similar to Ninject, we have to keep around an instance of IWindsorContainer.  Notice our RegisterControllers method.  It looks for all types in the assembly that implement IController and sets the lifestyle to transient (remember this one, it is important).  It also sets the name of the registration to the name of the class.

We'll initialize this in Application_Start:

WindsorBootstrapper.Initialize();

Next up is to create this WindsorMessageProvider class.  Listing 13.XX shows our implementation.

Listing 13.XX - A Windsor-specific IMessageProvider
public class WindsorMessageProvider : IMessageProvider
{
    public string GetMessage()
    {
        return "This message was provided by Windsor";
    }
}

The next step is to create our Windsor controller factory.  Listing 13.XX shows this.

Listing 13.XX - A Windsor controller factory
public class WindsorControllerFactory : DefaultControllerFactory
{
    private readonly IWindsorContainer _container;

    public WindsorControllerFactory(IWindsorContainer container)
    {
        _container = container;
    }

    protected override IController GetControllerInstance(RequestContext requestContext, Type controllerType)
    {
        var name = controllerType.Name;
        return _container.Resolve<IController>(name);            
    }
}

This should be familiar to you by now.  All we are doing is storing the IWindsorContainer instance and using it to resolve controller types at runtime.

You're probably already thinking it... we still need to wire this up in the Application_Start:

var container = WindsorBootstrapper.Container;
var controllerFactory = new WindsorControllerFactory(
   container);
ControllerBuilder.Current.SetControllerFactory(
   controllerFactory);

If you build & run the application, you'll see the final message displayed, verifying that the functionality was provided by the WindsorMessageProvider.

13.7 Summary

In this chapter you learned about the need for dependency injection, and the value of inversion of control containers.  We implemented three major IoC frameworks:  StructureMap, Ninject, and Windsor.  Of course others exist, and with this chapter you should be able to adapt to any other IoC framework with little trouble.

You also learned about an important extension point:  the ControllerFactory.  We leveraged it to provide runtime dependencies to our controllers, but you can also use them to swap out other pieces of the Controller implementation (such as IActionInvoker or ITempDataProvider).

In the next chapter, we will look at another advanced concept in ASP.NET MVC 2:  Model Binders and Value Providers.